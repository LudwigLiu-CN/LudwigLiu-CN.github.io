<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Springboot+MybatisGenerator</title>
    <url>/2019/11/20/springboot-MybatisGenerator/</url>
    <content><![CDATA[<p>When developing my Java course project, I learned to deploy Mybatis generator on springboot framework to automatically generate java classes from database(mysql). I find it may be useful in the future so I record it here.</p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/1.jpg" alt="1"></p>
<a id="more"></a>

<h1 id="Project-Initialization"><a href="#Project-Initialization" class="headerlink" title="Project Initialization"></a>Project Initialization</h1><p>I use the spring initializer provided by IntelliJ IDEA IDE to initialize my springboot project. Watch out for this, you need to select those dependency settings to get full functions of the initializer. JDBC API and MyBatis are universally needed, and the database driver should be decided by your database type.(Mine is MySQL so I select MySQL driver)</p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/2.PNG" alt="2"></p>
<p>After initialization done, you should be able to find such dependencies in the image below in pom.xml of your project.</p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/3.PNG" alt="3"></p>
<h1 id="Introduce-MyBatis-Generator-Plug-in"><a href="#Introduce-MyBatis-Generator-Plug-in" class="headerlink" title="Introduce MyBatis Generator Plug-in"></a>Introduce MyBatis Generator Plug-in</h1><p>What’s coming next is introducing the plug-in to your project. Simply adding those codes below in to pom.xml will do all the magic.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>But introducing the plug-in won’t be enough, we need to further deploy a config file to direct the generator to work.</p>
<h1 id="Deploy-MyBatis-Generator-Plug-in"><a href="#Deploy-MyBatis-Generator-Plug-in" class="headerlink" title="Deploy MyBatis Generator Plug-in"></a>Deploy MyBatis Generator Plug-in</h1><p>Before we actually deploy the config file, we need to first build a new mybatis-generator-config.xml and then introduce this file to the pom.xml.</p>
<h2 id="Deploy-the-File-Path-of-Your-Config-File"><a href="#Deploy-the-File-Path-of-Your-Config-File" class="headerlink" title="Deploy the File Path of Your Config File"></a>Deploy the File Path of Your Config File</h2><p>Add those codes into pom.xml.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mybatis config file path--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Pay attention here, the path should be the path of the config file relative to the pom.xml.</p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/4.jpg" alt="4"></p>
<h2 id="Allow-Overwriting-Generated-Files"><a href="#Allow-Overwriting-Generated-Files" class="headerlink" title="Allow Overwriting Generated Files"></a>Allow Overwriting Generated Files</h2><p>Sometimes our database is updated, and we need to generate new flies accordingly. The regular way to do this is deleting old files manually, and then using MyBatis Generator to generate new files. But you can also allow the generator to overwrite the old files, so you can update your code without deleting the old files manually.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mybatis config file path--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--allow overwriting files--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>However, MyBatis Generator only overwrites the old classes and mappers’ interfaces, and leaves the old mapper.xml unchanged, only adds new codes. This ensures the sql codes wrote by users will not be altered by the generator.</p>
<h2 id="Add-JDBC-Drvier-for-Database"><a href="#Add-JDBC-Drvier-for-Database" class="headerlink" title="Add JDBC Drvier for Database"></a>Add JDBC Drvier for Database</h2><p>MyBatis generator needs to connect to database, so the according JDBC driver is necessary. We can add the JDBC driver to the generator manually like this:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mybatis config file path--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--allow overwriting files--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- JDBC for mysql --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>But most of the time, our project has been deployed with JDBC, so there will be redundancy if we deploy it again. </p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/5.PNG" alt="5"></p>
<p>Maven provided <strong>includeCompileDependencies</strong> attribute to allow plug-in to use dependencies, so we don’t need to deploy it repeatedly.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mybatis config file path--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--allow overwriting files--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--add the dependecies of pom into generator--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includeCompileDependencies</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeCompileDependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Deploy-MyBatis-Generator-Config"><a href="#Deploy-MyBatis-Generator-Config" class="headerlink" title="Deploy MyBatis Generator Config"></a>Deploy MyBatis Generator Config</h1><p>Now it’s time for us to deploy the config file for real.  When MyBatis Generator starts, it will access the config file according to the deployment in the pom.xml. And this config is the real director of the generator and the most important part is the context part. The config file needs at least one context to function correctly.</p>
<h2 id="Introduce-Outer-Configuration-File"><a href="#Introduce-Outer-Configuration-File" class="headerlink" title="Introduce Outer Configuration File"></a>Introduce Outer Configuration File</h2><p>MyBatis Generator Config allows introducing outer configuration files, and the path should be relative to the current config file.</p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/6.JPG" alt="6"></p>
<p>Content in the application.properties:</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="meta">spring.datasource.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/ice?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">*****</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">*****</span></span><br></pre></td></tr></table></figure>

<p>Pay attention here. The url defines the schema of MySQL that is accessed by MyBatis Generator. Username and password should be your information to connect the database.</p>
<h2 id="Deploy-Context"><a href="#Deploy-Context" class="headerlink" title="Deploy Context"></a>Deploy Context</h2><p>It’s deployed in <generatorConfiguration>.</generatorConfiguration></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"myContext"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>id</strong>: whatever you like. Just make sure the ids of multiple contexts are different.</li>
<li><strong>defaultModelType</strong>: Default value is <strong>conditional</strong>, and value <strong>flat</strong> means every table has its own folder.</li>
<li><strong>targetRuntime</strong>: Default values is <strong>MyBatis3</strong>.  Another option is <strong>MyBatis3Simple</strong>, this will alter content of the generated mapper interfaces and mapper.xml.</li>
</ul>
<p><strong>targetRuntime = MyBatis3</strong>, the generated codes:</p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/7.png" alt="7"></p>
<p><strong>targetRuntime = Mybatis3Simple</strong>, the generated mappers interfaces and mapper.xml will contain less functions:</p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/8.png" alt="8"></p>
<h2 id="Sub-elements-of-Context"><a href="#Sub-elements-of-Context" class="headerlink" title="Sub-elements of Context"></a>Sub-elements of Context</h2><p>MyBatis provides some other sub-elements for users to deploy. Those elements should be given by the strict rules of amount and order:</p>
<ol>
<li><p><strong>property</strong> (0..N)</p>
</li>
<li><p><strong>plugin</strong> (0..N)</p>
</li>
<li><p><strong>commentGenerator</strong> (0 or 1)</p>
</li>
<li><p><strong>jdbcConnection</strong> (needs connectionFactory or jdbcConnection)</p>
</li>
<li><p><strong>javaTypeResolver</strong> (0 or 1)</p>
</li>
<li><p><strong>javaModelGenerator</strong> (At least one)</p>
</li>
<li><p><strong>sqlMapGenerator</strong> (0 or 1)</p>
</li>
<li><p><strong>javaClientGenerator</strong> (0 or 1)</p>
</li>
<li><p><strong>table</strong> (1..N)</p>
</li>
</ol>
<h3 id="Plug-in"><a href="#Plug-in" class="headerlink" title="Plug-in"></a>Plug-in</h3><p>You can deploy a plug-in like this:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"org.mybatis.generator.plugins.EqualsHashCodePlugin"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>This plug-in add functions of <strong>equals</strong> and <strong>hashCode</strong> to the Java classes.</p>
<h3 id="CommentGenerator"><a href="#CommentGenerator" class="headerlink" title="CommentGenerator"></a>CommentGenerator</h3><p>This one is used to generate comments of the codes. By default MyBatis generator will generate comments, so you can leave this alone if you want comments. </p>
<p>You can remove comments by deploying like this:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="javaTypeResolver"><a href="#javaTypeResolver" class="headerlink" title="javaTypeResolver"></a>javaTypeResolver</h3><p>javaTyprResolver defines the transforming rules between JDBC and java data types. You can leave it undeployed to utilize the default rules.</p>
<p>Actually we can only changed the rules of <em>bigDecimal</em> and <em>date</em> types.</p>
<h3 id="javaModelGenerator"><a href="#javaModelGenerator" class="headerlink" title="javaModelGenerator"></a>javaModelGenerator</h3><p>This one defines the paths of the generated packages and codes:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.demo.entity"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Enable schema as subpackages, default = false --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="enableSubPackages" value="false"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Enable altering string in set functions, default = false --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/20/springboot-MybatisGenerator/10.jpg" alt="10"></p>
<h3 id="sqlMapGenerator"><a href="#sqlMapGenerator" class="headerlink" title="sqlMapGenerator"></a>sqlMapGenerator</h3><p>Defines the paths of mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name="enableSubPackages" value="false"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/20/springboot-MybatisGenerator/9.jpg" alt="9"></p>
<h3 id="javaClientGenerator"><a href="#javaClientGenerator" class="headerlink" title="javaClientGenerator"></a>javaClientGenerator</h3><p>Deploy the path of XXXMapper.java(interfaces), similar to those two generators above.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.demo.dao"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name="enableSubPackages" value="false"/--&gt;</span><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p><em>schema</em> is the name of the database, which is unnecessary to deploy when using MySQL, but necessary for oracle. </p>
<p><em>tableName</em> is the name of table in the database.</p>
<p><em>domainObjectName</em> is the name of classes to be generated. When it undeployed, Mybatis generator will set the names by PascalCase.</p>
<p><em>enableXXXByExample</em> is by default true but only functions when <em>targetRuntime</em> = “MyBatis3”. And it will generate a corresponding Example class to help users to do Query by different conditions. You can set it as false if you don’t need it.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">""</span> <span class="attr">tableName</span>=<span class="string">"user"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="Use-MyBatis-Generator"><a href="#Use-MyBatis-Generator" class="headerlink" title="Use MyBatis Generator"></a>Use MyBatis Generator</h1><p>Now all deployment done! Just double click on MyBatis Generator in Maven and you’ll get all you need.</p>
<p><img src="/2019/11/20/springboot-MybatisGenerator/11.PNG" alt="11"></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Springboot</category>
      </categories>
      <tags>
        <tag>Springboot</tag>
        <tag>Java</tag>
        <tag>Mybatis</tag>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Spatial Transformer</title>
    <url>/2019/11/13/SpatialTransformer/</url>
    <content><![CDATA[<p>Medical images are tricky to handle, especially when it comes to dealing with single-channel CT images. Regular CNN architecture can hardly capture the useful features of those images, so I think it would be effective to utilize spatial transformer in our model. Here’s some note about this unit.</p>
<p><img src="/2019/11/13/SpatialTransformer/1.png" alt="1"></p>
<a id="more"></a>

<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>In this work we introduce a new learnable module, the <em>Spatial Transformer</em>, which explicitly allows the spatial manipulation of data within the network.</p>
<img src="/2019/11/13/SpatialTransformer/2.PNG" alt="2" style="zoom: 80%;">

<h2 id="Basic-Structure"><a href="#Basic-Structure" class="headerlink" title="Basic Structure"></a>Basic Structure</h2><p>The spatial transformer mechanism is split into three parts, shown in Fig. 2. In order of computation, fifirst a <em>localization network</em> takes the input feature map, and through a number of hidden layers outputs the parameters of the spatial transformation that should be applied to the feature map – this gives a transformation conditional on the input. Then, the predicted transformation parameters are used to create a sampling grid, which is a set of points where the input map should be sampled to produce the transformed output. This is done by the <em>grid generator</em>. Finally, the feature map and the sampling grid are taken as inputs to the <em>sampler</em>, producing the output map sampled from the input at the grid points.<img src="/2019/11/13/SpatialTransformer/3.PNG" alt="3" style="zoom:80%;"></p>
<h2 id="Localization-Network"><a href="#Localization-Network" class="headerlink" title="Localization Network"></a>Localization Network</h2><p>The localization network function <em>f</em><sub>loc</sub> () can take any form, such as a fully-connected network or a convolutional network, but should include a final regression layer to produce the transformation parameters <em>θ</em>. The size of <em>θ</em> can vary depending on the transformation type that is parameterized,</p>
<p><em>e.g.</em> for an affine transformation <em>θ</em> is 6-dimensional as in (1). Affine transformation:</p>
<img src="/2019/11/13/SpatialTransformer/4.PNG" alt="4" style="zoom:67%;">

<h2 id="Parameterized-Sampling-Grid"><a href="#Parameterized-Sampling-Grid" class="headerlink" title="Parameterized Sampling Grid"></a>Parameterized Sampling Grid</h2><p>We need to find the values of the points according to the coordinates of V, which are already set since the scale of it has been defined. In this affine case, the pointwise transformation is:</p>
<img src="/2019/11/13/SpatialTransformer/5.PNG" alt="5" style="zoom: 67%;">

<p>where (x<sub>i</sub><sup>t</sup>, y<sub>i</sub><sup>y</sup>) are the target coordinates of the regular grid in the output feature map, (x<sub>i</sub><sup>s</sup>, y<sub>i</sub><sup>t</sup>) are the source coordinates in the input feature map that define the sample points, and Aθ is the affine transformation matrix.</p>
<img src="/2019/11/13/SpatialTransformer/6.PNG" alt="6" style="zoom: 80%;">

<p>The transformation <em>T<sub>θ</sub></em> can also be more general, such as a plane projective transformation with 8 parameters, piece-wise affine, or a thin plate spline.</p>
<h2 id="Differentiable-Image-Sampling"><a href="#Differentiable-Image-Sampling" class="headerlink" title="Differentiable Image Sampling"></a>Differentiable Image Sampling</h2><p>The coordinates we get from the grid above could be decimal, besides we can’t simply use the value from U for the values around this coordinate should also be taken into consideration, and the formula to do this is:<br>$$<br>V_i^c = \Sigma_n^H\Sigma_m^WU_{nm}^ck(x_i^s-m;\Phi_y)k(u_i^s-n;\Phi_y)\ \ \ \ ∀i\epsilon[1…H’W’] \ ∀c\epsilon[1…C]<br>$$<br>where <em>δ</em>() is the Kronecker delta function. A bilinear sampling kernel can be used, giving<br>$$<br>V_i^c = \Sigma_n^H\Sigma_m^WU_{nm}^c max(0,1-|x_i^s-m|)max(0,1-|y_i^s-n|)<br>$$</p>
<h2 id="Spatial-Transformer-Network"><a href="#Spatial-Transformer-Network" class="headerlink" title="Spatial Transformer Network"></a>Spatial Transformer Network</h2><p> The combination of the localization network, grid generator, and sampler form a spatial transformer. This is a self-contained module which can be dropped into a CNN architecture at any point, and in any number, giving rise to <em>spatial transformer networks</em>.</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
        <category>Essay Notes</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Network Unit</tag>
      </tags>
  </entry>
  <entry>
    <title>Code for mathematic symbols in Latex (and mark down)</title>
    <url>/2019/11/07/MarkDownMath/</url>
    <content><![CDATA[<p>When editing some documents with Latex( or mark down), it often happens to me that I need to write some math functions or  Equations but don’t know the according code for some math mathematical symbols. It’s a waste of time to search such information online, So I record it here.</p>
<a id="more"></a>

<p><img src="/2019/11/07/MarkDownMath/1.png" alt="1"></p>
]]></content>
      <categories>
        <category>documentation skill</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>mark down</tag>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes of ENAS</title>
    <url>/2019/11/02/ENAS/</url>
    <content><![CDATA[<p>ENAS is introduced by my mentor of my research on the classification of malignant thyroid nodules. This could be a good way to set the basic architecture of our net work. So I read this paper.</p>
<a id="more"></a>

<h1 id="Efficient-Neural-Architecture-Search-via-Parameter-Sharing"><a href="#Efficient-Neural-Architecture-Search-via-Parameter-Sharing" class="headerlink" title="Efficient Neural Architecture Search via Parameter Sharing"></a>Efficient Neural Architecture Search via Parameter Sharing</h1><p> <a href="https://arxiv.org/abs/1802.03268" target="_blank" rel="noopener">https://arxiv.org/abs/1802.03268</a> </p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>We propose Efficient Neural Architecture Search (ENAS), a fast and inexpensive approach for automatic model design.  </p>
<h2 id="Designing-Recurrent-Cells"><a href="#Designing-Recurrent-Cells" class="headerlink" title="Designing Recurrent Cells"></a>Designing Recurrent Cells</h2><p>Our search space includes an exponential number of configurations. Specifically, if the recurrent cell has N nodes and we allow 4 activation functions (namely tanh, ReLU, identity, and sigmoid), then the search space has 4 N × N! configurations. </p>
<p><img src="/2019/11/02/ENAS/1.PNG" alt="1"></p>
<ol>
<li>At node 1: The controller first samples an activation function. In our example, the controller chooses the tanh activation function, which means that node 1 of the recurrent cell should compute h<sub>1</sub> = tanh (x<sub>t</sub> · W<sup>(x)</sup> + h<sub>t−1</sub> · W<sub>1</sub><sup>(h)</sup>  ). </li>
<li>At node 2: The controller then samples a previous index and an activation function. In our example, it chooses the previous index 1 and the activation function ReLU. Thus, node 2 of the cell computes h<sub>2</sub> = ReLU(h<sub>1</sub> · W<sub>2,1</sub><sup>(h)</sup> ). </li>
<li>At node 3: The controller again samples a previous index and an activation function. In our example, it chooses the previous index 2 and the activation function ReLU. Therefore, h<sub>3</sub> = ReLU(h<sub>2</sub> · W<sub>3,2</sub><sup>(h)</sup>). </li>
<li>At node 4: The controller again samples a previous index and an activation function. In our example, it chooses the previous index 1 and the activation function tanh, leading to h4 = tanh (h<sub>1</sub> · W<sub>4,1</sub><sup>(h)</sup>). </li>
<li>For the output, we simply average all the loose ends, i.e. the nodes that are not selected as inputs to any other nodes. In our example, since the indices 3 and 4 were never sampled to be the input for any node, the recurrent cell uses their average (h<sub>3</sub> + h<sub>4</sub>)/2 as its output. In other words, h<sub>t</sub> = (h<sub>3</sub> + h<sub>4</sub>)/2. </li>
</ol>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>ENAS’s controller is an RNN that decides: 1) which edges are activated and 2) which computations are performed at each node in the DAG. Our controller network is an LSTM with 100 hidden units.</p>
<h2 id="Training-ENAS-and-Deriving-Architecture"><a href="#Training-ENAS-and-Deriving-Architecture" class="headerlink" title="Training ENAS and Deriving Architecture"></a>Training ENAS and Deriving Architecture</h2><p>The training procedure of ENAS consists of two interleaving phases. The first phase trains ω, the shared parameters of the child models, on a whole pass through the training data set. The second phase trains θ, the parameters of the controller LSTM, for a fixed number of steps, typically set to 2000 in our experiments.</p>
<h2 id="Designing-Convolutional-Networks"><a href="#Designing-Convolutional-Networks" class="headerlink" title="Designing Convolutional Networks"></a>Designing Convolutional Networks</h2><p>The controller RNN also samples two sets of decisions at each decision block: 1) what previous nodes to connect to and 2) what computation operation to use.</p>
<p><img src="/2019/11/02/ENAS/2.PNG" alt="2"></p>
<h2 id="Designing-Convolutional-Cells"><a href="#Designing-Convolutional-Cells" class="headerlink" title="Designing Convolutional Cells"></a>Designing Convolutional Cells</h2><p>Rather than designing the entire convolutional network, one can design smaller modules and then connect them together to form a network. </p>
<p><img src="/2019/11/02/ENAS/3.PNG" alt="3"></p>
<ol>
<li>Nodes 1, 2 are input nodes, so no decisions are needed for them. Let h1, h2 be the outputs of these nodes. </li>
<li>At node 3: the controller samples two previous nodes and two operations. In Figure 5 Top Left, it samples node 2, node 2, separable conv 5x5, and identity. This means that h3 = sep conv 5x5(h2) + id(h2).</li>
<li>At node 4: the controller samples node 3, node 1, avg pool 3x3, and sep conv 3x3. This means that h4 = avg pool 3x3(h3) + sep conv 3x3(h1).</li>
<li>Since all nodes but h4 were used as inputs to at least another node, the only loose end, h4, is treated as the cell’s output. If there are multiple loose ends, they will be concatenated along the depth dimension to form the cell’s output.  </li>
</ol>
<h2 id="P-S"><a href="#P-S" class="headerlink" title="P.S."></a>P.S.</h2><p>Actually, after reading this paper I only have the slightest understanding of this Net Work, and as for the details like what’s really going on when training, and how do those parameters in one unit change  and cast influence on another unit, they still seem quite unclear to me.</p>
<p> <a href="https://github.com/shibuiwilliam/ENAS-Keras" target="_blank" rel="noopener">https://github.com/shibuiwilliam/ENAS-Keras</a> This is Keras implementation of ENAS. I ran the file  <a href="https://github.com/shibuiwilliam/ENAS-Keras/blob/master/ENAS_Keras_MNIST.ipynb" target="_blank" rel="noopener">ENAS_Keras_MNIST.ipynb</a> on my workstation with 2 GPUs of 1080ti, and found that it requires days to finish running. Then, I ran it on my data set of thyroid nodules, it still finished only 1/3 of the work load in 24h. Apparently, it’s unrealistic to use this method to build my network for its training price is too high to afford. But still this method could come handy in the future.</p>
<p>Besides, while collecting information about this method, I find something called auto-Keras, which is based on ENAS. It can figure out a suitable network architecture for the data you input, and then you can do some improving work based on it. It’s an open source project. I think it’s an excellent way to start a new network. I will do some digging about it in the future days.</p>
]]></content>
      <categories>
        <category>Deep Learning</category>
        <category>Essay Notes</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>CNNs of Thyroid Nodule Classification</title>
    <url>/2019/10/30/ThyroidNoduleClassificationNote/</url>
    <content><![CDATA[<p>I’m currently doing some research on classification of thyroid nodules by CNN. This is a note of some essays I found in this area.</p>
<a id="more"></a>

<h1 id="Classification-of-thyroid-nodules-in-ultrasound-images-using-deep-model-based-transfer-learning-and-hybrid-features"><a href="#Classification-of-thyroid-nodules-in-ultrasound-images-using-deep-model-based-transfer-learning-and-hybrid-features" class="headerlink" title="Classification of thyroid nodules in ultrasound images using deep model based transfer learning and hybrid features"></a><strong>Classification of thyroid nodules in ultrasound images using deep model based transfer learning and hybrid features</strong></h1><p><a href="https://ieeexplore.ieee.org/abstract/document/7952290" target="_blank" rel="noopener">https://ieeexplore.ieee.org/abstract/document/7952290</a></p>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>Besides the general feature map extracted by the CNN, this work combines it with other hand-crafted features of the images. They integrated HOG, SIFT and LBP features with the high-level features extracted from CNNs and jointed them to form a one-dimensional vector.</p>
<p><img src="/2019/10/30/ThyroidNoduleClassificationNote/1.gif" alt="1"></p>
<h2 id="Feature-selection-strategy"><a href="#Feature-selection-strategy" class="headerlink" title="Feature selection strategy"></a>Feature selection strategy</h2><p>The feature map extracted from the VGG-F model has 4096 dimensions. With 144 dimensions’ HOG features, 26 dimensions’ LBP features and 512 dimensions’ VLAD features, the total count of feature dimensions we have is 4778. In order to reducing the redundancies and irrelevancies among feature vector, feature selection is required. The feature selection standard is based on sorting the differences of benign samples and malignant samples:<br>$$<br>diff_k = \vert\frac{1}{N_{MB}}\sum_{i=1}^{N_{MB}}{v_{ik}} - \frac{1}{N_{MM}}\sum_{i=1}^{N_{MM}}{v_{ik}}\vert \quad (k = 1, 2,…N)<br>$$<br>Where, <em>N<sub>MB</sub></em> and <em>N<sub>MM</sub></em> are the number of benign and malignant nodules in the training set, <em>v<sub>ik</sub></em> is the <em>k</em>th dimensional feature of the <em>i</em>th image. The top 1000 features with the largest differences will be chosen as our final features for the thyroid nodule classification. </p>
<h2 id="Positive-Sample-First-Majority-Voting-Strategy"><a href="#Positive-Sample-First-Majority-Voting-Strategy" class="headerlink" title="Positive-Sample-First Majority Voting Strategy"></a>Positive-Sample-First Majority Voting Strategy</h2><p>Suppose T types of features can be extracted from the thyroid ultrasound images. For a feature extraction method <em>k</em>, a classifier <em>h<sub>k</sub></em> can be trained on the dataset. The value predicted by the classifier for sample x is <em>h<sub>k</sub></em>(x). The final predicted classification result for sample x is expressed as follows, <em>h(x)=mode(h<sub>1</sub>(x),…,h<sub>T</sub>(x))</em>, where the <em>mode</em> is striving for the modal operation. If the votes of benign and malignance are the same on the condition that T is an even number, the sample is considered as malignancy.  </p>
<h1 id="A-pre-trained-convolutional-neural-network-based-method-for-thyroid-nodule-diagnosis"><a href="#A-pre-trained-convolutional-neural-network-based-method-for-thyroid-nodule-diagnosis" class="headerlink" title="A pre-trained convolutional neural network based method for thyroid nodule diagnosis"></a>A pre-trained convolutional neural network based method for thyroid nodule diagnosis</h1><p> <a href="https://www.sciencedirect.com/science/article/pii/S0041624X16301913" target="_blank" rel="noopener">https://www.sciencedirect.com/science/article/pii/S0041624X16301913</a> </p>
<h2 id="Abstract-1"><a href="#Abstract-1" class="headerlink" title="Abstract"></a>Abstract</h2><p>In this study, we propose a hybrid method for thyroid nodule diagnosis, which is a fusion of two pre-trained convolutional neural networks (CNNs) with different convolutional layers and fully-connected layers.  </p>
<p><img src="/2019/10/30/ThyroidNoduleClassificationNote/4.jpg" alt="4"></p>
<h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>Each thyroid nodule has several longitudinal cutting maps or crosscutting maps. In total, 15,000 thyroid nodule images are obtained from different sonographic systems (Philips, GE-Healthcare, Esaote, Toshiba, Siemens, mindray and Hitachi) before surgery or FNA. The boundary of thyroid nodule in each image is manually delineated by physicians. So we can get 15,000 masks. These thyroid nodule images and their corresponding masks are in the same size and are both used for training our CNNs simultaneously. </p>
<p><img src="/2019/10/30/ThyroidNoduleClassificationNote/2.jpg" alt="2"></p>
<h2 id="Combination-of-two-different-CNNs"><a href="#Combination-of-two-different-CNNs" class="headerlink" title="Combination of two different CNNs"></a>Combination of two different CNNs</h2><p> A special CNN based method is developed to classify thyroid nodules, which is a fusion of two different CNN architectures. Moreover, these two CNNs use a pre-training strategy for initialization to avoid local optimum and employ a multi-view strategy to improve the performance. </p>
<p>To the best of our knowledge, different CNN architectures can learn different features, shallow network can be suitable for learning low-level features and deep network can take full advantage of learning high-level features. </p>
<p>Our CNN architectures are pre-trained with a set of 1.3 million natural images from the ImageNet database. </p>
<p>The image patches of size 225 * 225 cropped sampled randomly from thyroid nodule images are the inputs of our CNN based models, whose centers are in their corresponding masks.  </p>
<h2 id="Split-Dropout"><a href="#Split-Dropout" class="headerlink" title="Split Dropout"></a>Split Dropout</h2><p><img src="/2019/10/30/ThyroidNoduleClassificationNote/3.jpg" alt="3"></p>
]]></content>
      <categories>
        <category>Deep Learning</category>
        <category>Essay Notes</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>CNN</tag>
        <tag>Medical Image</tag>
      </tags>
  </entry>
  <entry>
    <title>My Hello World</title>
    <url>/2019/10/29/My-Hello-World/</url>
    <content><![CDATA[<p>My first  blog on this website!</p>
<p><img src="/2019/10/29/My-Hello-World/TheDarkSideOfTheMoon.jpg" alt="TheDarkSideOfTheMoon"></p>
<a id="more"></a>

<p>My first  blog on this website! As a matter of fact, I’ve been thinking about this for a long time. But not until a friend of mine introduce Hexo to me did I realize how easy it actually is to start my own blog. </p>
<p>So now, I’m here ready to record something of my life, meaningful or not. Mainly my blogs will be about coding or computer skills, but once in a while I’d like to record some other fun stuffs here, you know, something like <em>The Dark Side of the Moon</em> by Pink Floyd I’m listening to now, and rock music, basketball, video games and so on.</p>
<p>And also, thanks for visiting my blog!</p>
]]></content>
      <categories>
        <category>personal journal or something</category>
      </categories>
      <tags>
        <tag>hello world</tag>
        <tag>daily</tag>
      </tags>
  </entry>
</search>
